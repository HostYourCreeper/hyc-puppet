#!/bin/bash
# /etc/init.d/bukkit

### BEGIN INIT INFO
# Provides:   bukkit
# Required-Start: $local_fs $remote_fs
# Required-Stop:  $local_fs $remote_fs
# Should-Start:   $network
# Should-Stop:    $network
# Default-Start:  2 3 4 5
# Default-Stop:   0 1 6
# Short-Description:    Bukkit Server
# Description:    Init script for minecraft/bukkit server. 
### END INIT INFO

#############################
######### SETTINGS ##########
#############################

source /home/minecraft/.minecraft
source /etc/default/minecraft

# Name of server.jar file
SERVICE="$SERVICE_NAME.jar"
# Name to use for the screen instance
SCREEN="minecraft"
# User that should run the server
USERNAME="minecraft"
# Path to minecraft directory 
MCPATH="/home/${USERNAME}/minecraft"
# Number of CPUs/cores to use
CPU_COUNT=1
# Initial memory usage
INITMEM="64M"
# Remember: give the ramdisk enough space, subtract from the total amount
# of RAM available the size of your map and the RAM-consumption of your base system.
INVOCATION="java -server -Xmx$MAXMEM -Xms$INITMEM -jar $SERVICE --server-ip=0.0.0.0 --port=25565 nogui"
# Where the world backups should go
BACKUPPATH="/home/${USERNAME}/world_backups"
# Where the logs are copied with log-roll 
LOGPATH="${MCPATH}/logs"
# Where the whole minecraft directory is copied when whole-backup is executed
WHOLEBACKUP="/home/${USERNAME}/server_backups"
# folder names of the world
WORLDNAME[1]="world"
WORLDNAME[2]="world_nether"
WORLDNAME[3]="world_the_end"

ME=`whoami`
as_user() {
    if [ $ME == $USERNAME ] ; then
        bash -c "$1"
    else
        su - $USERNAME -c "$1"
    fi
}
datepath() {
    # datepath path filending-to-check returned-filending
    if [ -e $1`date +%F`$2 ]
    then
        echo $1`date +%FT%T`$3
    else
        echo $1`date +%F`$3
    fi
}
mc_start() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep java > /dev/null
    then
        echo "Tried to start but $SERVICE was already running!"
    else
        echo "$SERVICE was not running... starting."
        cd $MCPATH
        log_roll
        as_user "cd $MCPATH && screen -dmS $SCREEN $INVOCATION"
        sleep 7
        if ps ax | grep -v grep | grep -v -i SCREEN | grep java > /dev/null
        then
            echo "$SERVICE is now running."
        else
            echo "Could not start $SERVICE."
        fi
    fi
}

mc_stop() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep java > /dev/null
    then
        echo "$SERVICE is running... stopping."
        as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"save-all\"\015'"
        sleep 10
        as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"stop\"\015'"
        sleep 7
    else
        echo "$SERVICE was not running."
    fi
    if ps ax | grep -v grep | grep -v -i SCREEN | grep java > /dev/null
    then
        echo "$SERVICE could not be shut down... still running."
    else
        echo "$SERVICE is shut down."
    fi
}
log_roll() {
    if [ ! -d $LOGPATH ]; then
        as_user "mkdir -p $LOGPATH"
    fi
    path=`datepath $LOGPATH/server_ .log.gz .log`
    as_user "cp $MCPATH/server.log $path && gzip $path"
    # only if previous command was successful
    if [ $? -eq 0 ]; then
        # turnacate the existing log without restarting server
        as_user "cp /dev/null $MCPATH/server.log"
        as_user "echo \"Previous logs rolled to $path\" > $MCPATH/server.log "
    else    
        echo "Failed to rotate logs to $LOGPATH/server_$path.log.gz"
    fi
}
mc_whole_backup() {
    as_user "mkdir -p $WHOLEBACKUP"
    path=`datepath $WHOLEBACKUP/minecraft_`
    as_user "cp -r $MCPATH $path"
}
mc_world_backup() {
    for INDEX in ${!WORLDNAME[@]}
    do
        echo "Backing up minecraft ${WORLDNAME[$INDEX]}"
        as_user "mkdir -p $BACKUPPATH"
        path=`datepath $BACKUPPATH/${WORLDNAME[$INDEX]}_ .tar.bz2 .tar.bz2`
        as_user "tar -hcjf $path $MCPATH/${WORLDNAME[$INDEX]}"
    done
}
mc_update() {
    if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
    then
        echo "$SERVICE is running! Will not start update."
    else
        if [[ -z $1 ]]
        then
            NAME=$(curl http://dl.hostyourcreeper.com/${SERVICE_NAME}/latest)
        else
            NAME=$1
        fi
        URL="http://dl.hostyourcreeper.com/${SERVICE_NAME}/${NAME}"

        echo "Updating ${SERVICE_NAME} ..."
        echo "Downloading ${URL} ..."
        if [ -f $MCPATH/$NAME ]
        then
        	echo "This update is already downloaded."
        else
        	as_user "cd $MCPATH && wget -q $URL"
        fi
        if [ -f $MCPATH/$NAME ]
        then
            if `diff $MCPATH/${SERVICE} $MCPATH/${NAME} > /dev/null`
            then
                echo "You are already running this version of ${SERVICE_NAME}."
            else
                as_user "rm $MCPATH/$SERVICE"
                as_user "ln -s $MCPATH/${NAME} $MCPATH/${SERVICE}"
                echo "${SERVICE_NAME} successfully updated to ${NAME}."
            fi
        else
            echo "${SERVICE_NAME} update could not be downloaded."
        fi
    fi
}
usage() {
    echo "Usage: /etc/init.d/bukkit command"
    echo "       bukkit command"
    echo "       bk command"
    echo 
    echo "start - Starts the server"
    echo "stop - stops the server"
    echo "restart - restarts the server"
    echo "autostart-on - Autostart the server when it is nor running"
    echo "autostart-off - Disable autostart"
    echo "backup - backups the worlds defined in the script"
    echo "whole-backup - backups the entire server folder"
    echo "install - install the latest version of ${SERVICE_NAME}"
    echo "update - fetches the latest version of ${SERVICE_NAME}"
    echo "log-roll - Moves and gzips the logfile"
    echo "connected - lists connected users"
    echo "status - Shows server status"
    echo "version - returs Bukkit version"
    echo
}

case "$1" in
    start)
        # Starts the server
        mc_start
        ;;
    stop)
        # Stops the server
        as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER SHUTTING DOWN!\"\015'"
        mc_stop
        ;;
    autostart-on)
        as_user "touch ${MCPATH}/autostart"
        echo "${SERVICE_NAME}t autostart enabled."
        ;;
    autostart-off)
        as_user "rm ${MCPATH}/autostart"
        echo "${SERVICE_NAME} autostart disabled."
        ;;
    restart)
        # Restarts the server
        as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"say SERVER REBOOT IN 10 SECONDS.\"\015'"
        mc_stop
        mc_start
        ;;
    backup)
        # Backups world
        echo "Backing up worlds."
        mc_world_backup
        echo "Backup complete."
        ;;
    whole-backup)
        # Backup everything
        echo "Backing up everything."
        mc_whole_backup
        echo "Backup complete."
        ;;
    update)
        as_user "screen -p 0 -S minecraft -X eval 'stuff \"say SERVER UPDATE IN 10 SECONDS.\"\015'"
        mc_stop
        mc_whole_backup
        mc_update $2
        mc_start
        ;;
    install)
        as_user "mkdir -p ${MCPATH}"
        as_user "mkdir -p ${BACKUPPATH}"
        as_user "mkdir -p ${WHOLEBACKUP}"
        mc_update
        ;;
    connected)
        # Lists connected users
        as_user "screen -p 0 -S $SCREEN -X eval 'stuff \"list\"\015'"
        sleep 3s
        tac $MCPATH/server.log | grep -m 1 "Connected"
        ;;
    log-roll)
        log_roll
        ;;
    status)
        # Shows server status
        if ps ax | grep -v grep | grep -v -i SCREEN | grep $SERVICE > /dev/null
        then
            echo "$SERVICE is running."
        else
            echo "$SERVICE is not running."
        fi
        ;;
    version)
        if [ $SERVICE_NAME = "craftbukkit" ]
        then
            MC_VERSION=`grep INFO $MCPATH/server.log | awk '/CraftBukkit/ {sub(/\)/, ""); print $12 | "tail -n 1"}'`
            BK_VERSION=`grep INFO $MCPATH/server.log |  awk '/CraftBukkit/ {sub(/\)/, ""); print $10 | "tail -n 1"}'`
            echo "CraftBukkit version $BK_VERSION"
            echo "Minecraft version $MC_VERSION"
        elif [ $SERVICE_NAME = "minecraft_server" ]
        then
            MC_VERSION=`grep INFO $MCPATH/server.log | grep version | tail -n 1 | cut -d' ' -f8`
            echo "Minecraft version $MC_VERSION"
        fi
        ;;
    help)
        usage
        ;;
    *)
        usage
        exit 1
        ;;
esac

exit 0
